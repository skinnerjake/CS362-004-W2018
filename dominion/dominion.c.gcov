        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 210 returned 100% blocks executed 83%
      210:    8:int compare(const void* a, const void* b) {
      210:    8-block  0
      210:    9:  if (*(int*)a > *(int*)b)
      210:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 210
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
      210:   11:  if (*(int*)a < *(int*)b)
      210:   11-block  0
branch  0 taken 56 (fallthrough)
branch  1 taken 154
       56:   12:    return -1;
       56:   12-block  0
unconditional  0 taken 56
      154:   13:  return 0;
      154:   13-block  0
unconditional  0 taken 154
        -:   14:}
        -:   15:
function newGame called 8 returned 100% blocks executed 100%
        8:   16:struct gameState* newGame() {
        8:   16-block  0
        8:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        8:   18:  return g;
        8:   18-block  0
unconditional  0 taken 8
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        7:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   44-block  0
call    0 returned 7
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 7
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
        7:   57-block  0
unconditional  0 taken 7
       70:   57-block  1
unconditional  1 taken 70
       77:   57-block  2
branch  2 taken 70
branch  3 taken 7 (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
       70:   59-block  0
unconditional  0 taken 70
      700:   59-block  1
unconditional  1 taken 700
      770:   59-block  2
branch  2 taken 700
branch  3 taken 70 (fallthrough)
        -:   60:        {
      700:   61:		  if (j != i && kingdomCards[j] == kingdomCards[i])
      700:   61-block  0
branch  0 taken 630 (fallthrough)
branch  1 taken 70
      630:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 630
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:      }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:	if (numPlayers == 2) {
        7:   73-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   74:		state->supplyCount[curse] = 10;
        7:   74-block  0
unconditional  0 taken 7
        -:   75:    }
    #####:   76:	else if (numPlayers == 3) {
    $$$$$:   76-block  0
branch  0 never executed
branch  1 never executed
    #####:   77:		state->supplyCount[curse] = 20;
    $$$$$:   77-block  0
unconditional  0 never executed
        -:   78:    }
        -:   79:	else {
    #####:   80:		state->supplyCount[curse] = 30;
    $$$$$:   80-block  0
unconditional  0 never executed
        -:   81:    }
        -:   82:
        -:   83:  //set number of Victory cards
        7:   84:	if (numPlayers == 2) {
        7:   84-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   85:		state->supplyCount[estate] = 8;
        7:   86:		state->supplyCount[duchy] = 8;
        7:   87:		state->supplyCount[province] = 8;
        7:   87-block  0
unconditional  0 taken 7
        -:   88:    } else {
    #####:   89:		state->supplyCount[estate] = 12;
    #####:   90:		state->supplyCount[duchy] = 12;
    #####:   91:		state->supplyCount[province] = 12;
    $$$$$:   91-block  0
unconditional  0 never executed
        -:   92:    }
        -:   93:
        -:   94:  //set number of Treasure cards
        7:   95:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:   96:	state->supplyCount[silver] = 40;
        7:   97:	state->supplyCount[gold] = 30;
        -:   98:
        -:   99:  //set number of Kingdom cards
      147:  100:	for (i = adventurer; i <= treasure_map; i++)  	//loop all cards
        7:  100-block  0
unconditional  0 taken 7
      140:  100-block  1
unconditional  1 taken 140
      147:  100-block  2
branch  2 taken 140
branch  3 taken 7 (fallthrough)
     1155:  101:		for (j = 0; j < 10; j++) {        		//loop chosen cards
      140:  101-block  0
unconditional  0 taken 140
     1015:  101-block  1
unconditional  1 taken 1015
     1155:  101-block  2
branch  2 taken 1085
branch  3 taken 70 (fallthrough)
     1085:  102:			if (kingdomCards[j] == i) {
     1085:  102-block  0
branch  0 taken 70 (fallthrough)
branch  1 taken 1015
        -:  103:				//check if card is a 'Victory' Kingdom card
       70:  104:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
       70:  104-block  0
branch  0 taken 70 (fallthrough)
branch  1 taken 0
       70:  104-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 63
       14:  105:					if (numPlayers == 2)
        7:  105-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  105-block  1
unconditional  2 taken 7
        7:  106:						state->supplyCount[i] = 8; 
        7:  106-block  0
unconditional  0 taken 7
        -:  107:					else 
    #####:  108:						state->supplyCount[i] = 12;
    $$$$$:  108-block  0
unconditional  0 never executed
        -:  109:				}
        -:  110:				else
       63:  111:					state->supplyCount[i] = 10;
       63:  111-block  0
unconditional  0 taken 63
       70:  112:				break;
       70:  112-block  0
unconditional  0 taken 70
        -:  113:			}
        -:  114:			else    //card is not in the set choosen for the game
     1015:  115:				state->supplyCount[i] = -1;
        -:  116:		}
        -:  117:
        -:  118:  ////////////////////////
        -:  119:  //supply intilization complete
        -:  120:
        -:  121:  //set player decks
       21:  122:  for (i = 0; i < numPlayers; i++)
        7:  122-block  0
unconditional  0 taken 7
       14:  122-block  1
unconditional  1 taken 14
       21:  122-block  2
branch  2 taken 14
branch  3 taken 7 (fallthrough)
        -:  123:    {
       14:  124:      state->deckCount[i] = 0;
       56:  125:      for (j = 0; j < 3; j++)
       14:  125-block  0
unconditional  0 taken 14
       42:  125-block  1
unconditional  1 taken 42
       56:  125-block  2
branch  2 taken 42
branch  3 taken 14 (fallthrough)
        -:  126:	{
       42:  127:	  state->deck[i][j] = estate;
       42:  128:	  state->deckCount[i]++;
        -:  129:	}
      112:  130:      for (j = 3; j < 10; j++)
       14:  130-block  0
unconditional  0 taken 14
       98:  130-block  1
unconditional  1 taken 98
      112:  130-block  2
branch  2 taken 98
branch  3 taken 14 (fallthrough)
        -:  131:	{
       98:  132:	  state->deck[i][j] = copper;
       98:  133:	  state->deckCount[i]++;		
        -:  134:	}
        -:  135:    }
        -:  136:
        -:  137:  //shuffle player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
        7:  138-block  0
unconditional  0 taken 7
       14:  138-block  1
unconditional  1 taken 14
       21:  138-block  2
branch  2 taken 14
branch  3 taken 7 (fallthrough)
        -:  139:    {
       14:  140:      if ( shuffle(i, state) < 0 )
       14:  140-block  0
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
        -:  141:	{
    #####:  142:	  return -1;
    $$$$$:  142-block  0
unconditional  0 never executed
        -:  143:	}
        -:  144:    }
        -:  145:
        -:  146:  //draw player hands
       21:  147:  for (i = 0; i < numPlayers; i++)
        7:  147-block  0
unconditional  0 taken 7
       14:  147-block  1
unconditional  1 taken 14
       21:  147-block  2
branch  2 taken 14
branch  3 taken 7 (fallthrough)
        -:  148:    {  
        -:  149:      //initialize hand size to zero
       14:  150:      state->handCount[i] = 0;
       14:  151:      state->discardCount[i] = 0;
        -:  152:      //draw 5 cards
        -:  153:      // for (j = 0; j < 5; j++)
        -:  154:      //	{
        -:  155:      //	  drawCard(i, state);
        -:  156:      //	}
        -:  157:    }
        -:  158:  
        -:  159:  //set embargo tokens to 0 for all supply piles
      196:  160:  for (i = 0; i <= treasure_map; i++)
        7:  160-block  0
unconditional  0 taken 7
      189:  160-block  1
unconditional  1 taken 189
      196:  160-block  2
branch  2 taken 189
branch  3 taken 7 (fallthrough)
        -:  161:    {
      189:  162:      state->embargoTokens[i] = 0;
        -:  163:    }
        -:  164:
        -:  165:  //initialize first player's turn
        7:  166:  state->outpostPlayed = 0;
        7:  167:  state->phase = 0;
        7:  168:  state->numActions = 1;
        7:  169:  state->numBuys = 1;
        7:  170:  state->playedCardCount = 0;
        7:  171:  state->whoseTurn = 0;
        7:  172:  state->handCount[state->whoseTurn] = 0;
        -:  173:  //int it; move to top
        -:  174:
        -:  175:  //Moved draw cards to here, only drawing at the start of a turn
       42:  176:  for (it = 0; it < 5; it++){
        7:  176-block  0
unconditional  0 taken 7
unconditional  1 taken 35
       42:  176-block  1
branch  2 taken 35
branch  3 taken 7 (fallthrough)
       35:  177:    drawCard(state->whoseTurn, state);
       35:  177-block  0
call    0 returned 35
        -:  178:  }
        -:  179:
        7:  180:  updateCoins(state->whoseTurn, state, 0);
        7:  180-block  0
call    0 returned 7
        -:  181:
        7:  182:  return 0;
unconditional  0 taken 7
        -:  183:}
        -:  184:
function shuffle called 14 returned 100% blocks executed 94%
       14:  185:int shuffle(int player, struct gameState *state) {
       14:  185-block  0
        -:  186: 
        -:  187:
        -:  188:  int newDeck[MAX_DECK];
       14:  189:  int newDeckPos = 0;
        -:  190:  int card;
        -:  191:  int i;
        -:  192:
       14:  193:  if (state->deckCount[player] < 1)
       14:  193-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:  194:    return -1;
    $$$$$:  194-block  0
unconditional  0 never executed
       14:  195:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       14:  195-block  0
call    0 returned 14
        -:  196:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  197:
      154:  198:  while (state->deckCount[player] > 0) {
unconditional  0 taken 14
      154:  198-block  0
branch  1 taken 140
branch  2 taken 14 (fallthrough)
      140:  199:    card = floor(Random() * state->deckCount[player]);
      140:  199-block  0
call    0 returned 140
      140:  200:    newDeck[newDeckPos] = state->deck[player][card];
      140:  201:    newDeckPos++;
      453:  202:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 140
      313:  202-block  0
unconditional  1 taken 313
      453:  202-block  1
branch  2 taken 313
branch  3 taken 140 (fallthrough)
      313:  203:      state->deck[player][i] = state->deck[player][i+1];
        -:  204:    }
      140:  205:    state->deckCount[player]--;
      140:  205-block  0
unconditional  0 taken 140
        -:  206:  }
      154:  207:  for (i = 0; i < newDeckPos; i++) {
       14:  207-block  0
unconditional  0 taken 14
      140:  207-block  1
unconditional  1 taken 140
      154:  207-block  2
branch  2 taken 140
branch  3 taken 14 (fallthrough)
      140:  208:    state->deck[player][i] = newDeck[i];
      140:  209:    state->deckCount[player]++;
        -:  210:  }
        -:  211:
       14:  212:  return 0;
       14:  212-block  0
unconditional  0 taken 14
       14:  212-block  1
unconditional  1 taken 14
        -:  213:}
        -:  214:
function playCard called 0 returned 0% blocks executed 0%
    #####:  215:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  215-block  0
        -:  216:{	
        -:  217:  int card;
    #####:  218:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  219:
        -:  220:  //check if it is the right phase
    #####:  221:  if (state->phase != 0)
    $$$$$:  221-block  0
branch  0 never executed
branch  1 never executed
        -:  222:    {
    #####:  223:      return -1;
    $$$$$:  223-block  0
unconditional  0 never executed
        -:  224:    }
        -:  225:	
        -:  226:  //check if player has enough actions
    #####:  227:  if ( state->numActions < 1 )
    $$$$$:  227-block  0
branch  0 never executed
branch  1 never executed
        -:  228:    {
    #####:  229:      return -1;
    $$$$$:  229-block  0
unconditional  0 never executed
        -:  230:    }
        -:  231:	
        -:  232:  //get card played
    #####:  233:  card = handCard(handPos, state);
    $$$$$:  233-block  0
call    0 never executed
        -:  234:	
        -:  235:  //check if selected card is an action
    #####:  236:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  236-block  0
branch  2 never executed
branch  3 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
unconditional  0 never executed
        -:  239:    }
        -:  240:	
        -:  241:  //play card
    #####:  242:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
unconditional  0 never executed
        -:  245:    }
        -:  246:	
        -:  247:  //reduce number of actions
    #####:  248:  state->numActions--;
        -:  249:
        -:  250:  //update coins (Treasure cards may be added with card draws)
    #####:  251:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  251-block  0
call    0 never executed
        -:  252:	
    #####:  253:  return 0;
unconditional  0 never executed
    $$$$$:  253-block  0
unconditional  1 never executed
        -:  254:}
        -:  255:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  256:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  256-block  0
    $$$$$:  256-block  1
unconditional  0 never executed
        -:  257:  int who;
        -:  258:  if (DEBUG){
        -:  259:    printf("Entering buyCard...\n");
        -:  260:  }
        -:  261:
        -:  262:  // I don't know what to do about the phase thing.
        -:  263:
    #####:  264:  who = state->whoseTurn;
        -:  265:
    #####:  266:  if (state->numBuys < 1){
    $$$$$:  266-block  0
branch  0 never executed
branch  1 never executed
        -:  267:    if (DEBUG)
        -:  268:      printf("You do not have any buys left\n");
    #####:  269:    return -1;
    $$$$$:  269-block  0
unconditional  0 never executed
    #####:  270:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  271:    if (DEBUG)
        -:  272:      printf("There are not any of that type of card left\n");
    #####:  273:    return -1;
    $$$$$:  273-block  0
unconditional  0 never executed
    #####:  274:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  275:    if (DEBUG) 
        -:  276:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  277:    return -1;
    $$$$$:  277-block  0
unconditional  0 never executed
        -:  278:  } else {
    #####:  279:    state->phase=1;
        -:  280:    //state->supplyCount[supplyPos]--;
    #####:  281:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  281-block  0
call    0 never executed
        -:  282:  
    #####:  283:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  284:    state->numBuys--;
unconditional  0 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  287:  }
        -:  288:
        -:  289:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  290:  //state->discardCount[who]++;
        -:  291:    
    #####:  292:  return 0;
    $$$$$:  292-block  0
unconditional  0 never executed
        -:  293:}
        -:  294:
function numHandCards called 43 returned 100% blocks executed 100%
       43:  295:int numHandCards(struct gameState *state) {
       43:  295-block  0
       43:  296:  return state->handCount[ whoseTurn(state) ];
       43:  296-block  0
call    0 returned 43
unconditional  1 taken 43
        -:  297:}
        -:  298:
function handCard called 17 returned 100% blocks executed 100%
       17:  299:int handCard(int handPos, struct gameState *state) {
       17:  299-block  0
       17:  300:  int currentPlayer = whoseTurn(state);
       17:  300-block  0
call    0 returned 17
       17:  301:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 17
        -:  302:}
        -:  303:
function supplyCount called 35 returned 100% blocks executed 100%
       35:  304:int supplyCount(int card, struct gameState *state) {
       35:  304-block  0
       35:  305:  return state->supplyCount[card];
       35:  305-block  0
unconditional  0 taken 35
        -:  306:}
        -:  307:
function fullDeckCount called 7 returned 100% blocks executed 82%
        7:  308:int fullDeckCount(int player, int card, struct gameState *state) {
        7:  308-block  0
        -:  309:  int i;
        7:  310:  int count = 0;
        -:  311:
       56:  312:  for (i = 0; i < state->deckCount[player]; i++)
        7:  312-block  0
unconditional  0 taken 7
       49:  312-block  1
unconditional  1 taken 49
       56:  312-block  2
branch  2 taken 49
branch  3 taken 7 (fallthrough)
        -:  313:    {
       49:  314:      if (state->deck[player][i] == card) count++;
       49:  314-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 38
       11:  314-block  1
unconditional  2 taken 11
        -:  315:    }
        -:  316:
       33:  317:  for (i = 0; i < state->handCount[player]; i++)
        7:  317-block  0
unconditional  0 taken 7
       26:  317-block  1
unconditional  1 taken 26
       33:  317-block  2
branch  2 taken 26
branch  3 taken 7 (fallthrough)
        -:  318:    {
       26:  319:      if (state->hand[player][i] == card) count++;
       26:  319-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 14
       12:  319-block  1
unconditional  2 taken 12
        -:  320:    }
        -:  321:
        7:  322:  for (i = 0; i < state->discardCount[player]; i++)
        7:  322-block  0
unconditional  0 taken 7
    $$$$$:  322-block  1
unconditional  1 never executed
        7:  322-block  2
branch  2 taken 0
branch  3 taken 7 (fallthrough)
        -:  323:    {
    #####:  324:      if (state->discard[player][i] == card) count++;
    $$$$$:  324-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  324-block  1
unconditional  2 never executed
        -:  325:    }
        -:  326:
        7:  327:  return count;
        7:  327-block  0
unconditional  0 taken 7
        -:  328:}
        -:  329:
function whoseTurn called 117 returned 100% blocks executed 100%
      117:  330:int whoseTurn(struct gameState *state) {
      117:  330-block  0
      117:  331:  return state->whoseTurn;
      117:  331-block  0
unconditional  0 taken 117
        -:  332:}
        -:  333:
function endTurn called 4 returned 100% blocks executed 100%
        4:  334:int endTurn(struct gameState *state) {
        4:  334-block  0
        -:  335:  int k;
        -:  336:  int i;
        4:  337:  int currentPlayer = whoseTurn(state);
        4:  337-block  0
call    0 returned 4
        -:  338:  
        -:  339:  //Discard hand
       26:  340:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 taken 4
       22:  340-block  0
unconditional  1 taken 22
       26:  340-block  1
branch  2 taken 22
branch  3 taken 4 (fallthrough)
       22:  341:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       22:  342:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  343:  }
        4:  344:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  345:    
        -:  346:  //Code for determining the player
        4:  347:  if (currentPlayer < (state->numPlayers - 1)){ 
        4:  347-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  348:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        3:  348-block  0
unconditional  0 taken 3
        -:  349:  }
        -:  350:  else{
        1:  351:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        1:  351-block  0
unconditional  0 taken 1
        -:  352:  }
        -:  353:
        4:  354:  state->outpostPlayed = 0;
        4:  355:  state->phase = 0;
        4:  356:  state->numActions = 1;
        4:  357:  state->coins = 0;
        4:  358:  state->numBuys = 1;
        4:  359:  state->playedCardCount = 0;
        4:  360:  state->handCount[state->whoseTurn] = 0;
        -:  361:
        -:  362:  //int k; move to top
        -:  363:  //Next player draws hand
       24:  364:  for (k = 0; k < 5; k++){
        4:  364-block  0
unconditional  0 taken 4
unconditional  1 taken 20
       24:  364-block  1
branch  2 taken 20
branch  3 taken 4 (fallthrough)
       20:  365:    drawCard(state->whoseTurn, state);//Draw a card
       20:  365-block  0
call    0 returned 20
        -:  366:  }
        -:  367:
        -:  368:  //Update money
        4:  369:  updateCoins(state->whoseTurn, state , 0);
        4:  369-block  0
call    0 returned 4
        -:  370:
        4:  371:  return 0;
unconditional  0 taken 4
        -:  372:}
        -:  373:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  374:int isGameOver(struct gameState *state) {
        5:  374-block  0
        -:  375:  int i;
        -:  376:  int j;
        -:  377:	
        -:  378:  //if stack of Province cards is empty, the game ends
        5:  379:  if (state->supplyCount[province] == 0)
        5:  379-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        -:  380:    {
        2:  381:      return 1;
        2:  381-block  0
unconditional  0 taken 2
        -:  382:    }
        -:  383:
        -:  384:  //if three supply pile are at 0, the game ends
        3:  385:  j = 0;
       78:  386:  for (i = 0; i < 25; i++)
        3:  386-block  0
unconditional  0 taken 3
       75:  386-block  1
unconditional  1 taken 75
       78:  386-block  2
branch  2 taken 75
branch  3 taken 3 (fallthrough)
        -:  387:    {
       75:  388:      if (state->supplyCount[i] == 0)
       75:  388-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  389:	{
        5:  390:	  j++;
        5:  390-block  0
unconditional  0 taken 5
        -:  391:	}
        -:  392:    }
        3:  393:  if ( j >= 3)
        3:  393-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  394:    {
        1:  395:      return 1;
        1:  395-block  0
unconditional  0 taken 1
        -:  396:    }
        -:  397:
        2:  398:  return 0;
        2:  398-block  0
unconditional  0 taken 2
        -:  399:}
        -:  400:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  401:int scoreFor (int player, struct gameState *state) {
    $$$$$:  401-block  0
        -:  402:
        -:  403:  int i;
    #####:  404:  int score = 0;
        -:  405:  //score from hand
    #####:  406:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  406-block  0
unconditional  0 never executed
    $$$$$:  406-block  1
unconditional  1 never executed
    $$$$$:  406-block  2
branch  2 never executed
branch  3 never executed
        -:  407:    {
    #####:  408:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  408-block  1
unconditional  2 never executed
    #####:  409:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  409-block  1
unconditional  2 never executed
    #####:  410:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  410-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  410-block  1
unconditional  2 never executed
    #####:  411:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  411-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  411-block  1
unconditional  2 never executed
    #####:  412:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  412-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  412-block  1
unconditional  2 never executed
    #####:  413:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  413-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  413-block  1
call    2 never executed
unconditional  3 never executed
        -:  414:    }
        -:  415:
        -:  416:  //score from discard
    #####:  417:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  417-block  0
unconditional  0 never executed
    $$$$$:  417-block  1
unconditional  1 never executed
    $$$$$:  417-block  2
branch  2 never executed
branch  3 never executed
        -:  418:    {
    #####:  419:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  419-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  419-block  1
unconditional  2 never executed
    #####:  420:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  420-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  420-block  1
unconditional  2 never executed
    #####:  421:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  421-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  421-block  1
unconditional  2 never executed
    #####:  422:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  422-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  422-block  1
unconditional  2 never executed
    #####:  423:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  423-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  423-block  1
unconditional  2 never executed
    #####:  424:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
call    2 never executed
unconditional  3 never executed
        -:  425:    }
        -:  426:
        -:  427:  //score from deck
    #####:  428:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  428-block  0
unconditional  0 never executed
    $$$$$:  428-block  1
unconditional  1 never executed
    $$$$$:  428-block  2
branch  2 never executed
branch  3 never executed
        -:  429:    {
    #####:  430:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
unconditional  2 never executed
    #####:  431:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  431-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  431-block  1
unconditional  2 never executed
    #####:  432:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  432-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  432-block  1
unconditional  2 never executed
    #####:  433:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  433-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  433-block  1
unconditional  2 never executed
    #####:  434:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
unconditional  2 never executed
    #####:  435:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
call    2 never executed
unconditional  3 never executed
        -:  436:    }
        -:  437:
    #####:  438:  return score;
    $$$$$:  438-block  0
unconditional  0 never executed
        -:  439:}
        -:  440:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  441:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  441-block  0
        -:  442:  int i;	
        -:  443:  int j;
        -:  444:  int highScore;
        -:  445:  int currentPlayer;
        -:  446:
        -:  447:  //get score for each player
    #####:  448:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  448-block  0
unconditional  0 never executed
    $$$$$:  448-block  1
unconditional  1 never executed
    $$$$$:  448-block  2
branch  2 never executed
branch  3 never executed
        -:  449:    {
        -:  450:      //set unused player scores to -9999
    #####:  451:      if (i >= state->numPlayers)
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
        -:  452:	{
    #####:  453:	  players[i] = -9999;
    $$$$$:  453-block  0
unconditional  0 never executed
        -:  454:	}
        -:  455:      else
        -:  456:	{
    #####:  457:	  players[i] = scoreFor (i, state);
    $$$$$:  457-block  0
call    0 never executed
unconditional  1 never executed
        -:  458:	}
        -:  459:    }
        -:  460:
        -:  461:  //find highest score
    #####:  462:  j = 0;
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
unconditional  0 never executed
    $$$$$:  463-block  1
unconditional  1 never executed
    $$$$$:  463-block  2
branch  2 never executed
branch  3 never executed
        -:  464:    {
    #####:  465:      if (players[i] > players[j])
    $$$$$:  465-block  0
branch  0 never executed
branch  1 never executed
        -:  466:	{
    #####:  467:	  j = i;
    $$$$$:  467-block  0
unconditional  0 never executed
        -:  468:	}
        -:  469:    }
    #####:  470:  highScore = players[j];
        -:  471:
        -:  472:  //add 1 to players who had less turns
    #####:  473:  currentPlayer = whoseTurn(state);
    $$$$$:  473-block  0
call    0 never executed
    #####:  474:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  474-block  0
unconditional  1 never executed
    $$$$$:  474-block  1
branch  2 never executed
branch  3 never executed
        -:  475:    {
    #####:  476:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  476-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  476-block  1
branch  2 never executed
branch  3 never executed
        -:  477:	{
    #####:  478:	  players[i]++;
    $$$$$:  478-block  0
unconditional  0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find new highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  484-block  0
unconditional  0 never executed
    $$$$$:  484-block  1
unconditional  1 never executed
    $$$$$:  484-block  2
branch  2 never executed
branch  3 never executed
        -:  485:    {
    #####:  486:      if ( players[i] > players[j] )
    $$$$$:  486-block  0
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
    $$$$$:  488-block  0
unconditional  0 never executed
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //set winners in array to 1 and rest to 0
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  494-block  0
unconditional  0 never executed
    $$$$$:  494-block  1
unconditional  1 never executed
    $$$$$:  494-block  2
branch  2 never executed
branch  3 never executed
        -:  495:    {
    #####:  496:      if ( players[i] == highScore )
    $$$$$:  496-block  0
branch  0 never executed
branch  1 never executed
        -:  497:	{
    #####:  498:	  players[i] = 1;
    $$$$$:  498-block  0
unconditional  0 never executed
        -:  499:	}
        -:  500:      else
        -:  501:	{
    #####:  502:	  players[i] = 0;
    $$$$$:  502-block  0
unconditional  0 never executed
        -:  503:	}
        -:  504:    }
        -:  505:
    #####:  506:  return 0;
    $$$$$:  506-block  0
unconditional  0 never executed
        -:  507:}
        -:  508:
function drawCard called 75 returned 100% blocks executed 33%
       75:  509:int drawCard(int player, struct gameState *state)
       75:  509-block  0
        -:  510:{	int count;
        -:  511:  int deckCounter;
       75:  512:  if (state->deckCount[player] <= 0){//Deck is empty
       75:  512-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 75
    #####:  513:    if (state->discardCount[player] <=0)
    $$$$$:  513-block  0
branch  0 never executed
branch  1 never executed
    #####:  514:		return -1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:    //Step 1 Shuffle the discard pile back into a deck
        -:  516:    int i;
        -:  517:    //Move discard to deck
    #####:  518:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  518-block  0
unconditional  0 never executed
    $$$$$:  518-block  1
unconditional  1 never executed
    $$$$$:  518-block  2
branch  2 never executed
branch  3 never executed
    #####:  519:      state->deck[player][i] = state->discard[player][i];
    #####:  520:      state->discard[player][i] = -1;
        -:  521:    }
        -:  522:
    #####:  523:    state->deckCount[player] = state->discardCount[player];
    #####:  524:    state->discardCount[player] = 0;//Reset discard
        -:  525:
        -:  526:    //Shufffle the deck
    #####:  527:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  527-block  0
call    0 never executed
        -:  528:   
        -:  529:    if (DEBUG){//Debug statements
        -:  530:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  531:    }
        -:  532:    
    #####:  533:    state->discardCount[player] = 0;
        -:  534:
        -:  535:    //Step 2 Draw Card
    #####:  536:    count = state->handCount[player];//Get current player's hand count
unconditional  0 never executed
        -:  537:    
        -:  538:    if (DEBUG){//Debug statements
        -:  539:      printf("Current hand count: %d\n", count);
        -:  540:    }
        -:  541:    
    #####:  542:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  543:
    #####:  544:    if (deckCounter == 0)
    $$$$$:  544-block  0
branch  0 never executed
branch  1 never executed
    #####:  545:      return -1;
    $$$$$:  545-block  0
unconditional  0 never executed
        -:  546:
    #####:  547:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  548:    state->deckCount[player]--;
    #####:  549:    state->handCount[player]++;//Increment hand count
    $$$$$:  549-block  0
unconditional  0 never executed
        -:  550:  }
        -:  551:
        -:  552:  else{
       75:  553:    int count = state->handCount[player];//Get current hand count for player
       75:  553-block  0
unconditional  0 taken 75
        -:  554:    int deckCounter;
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:
       75:  559:    deckCounter = state->deckCount[player];//Create holder for the deck count
       75:  560:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       75:  561:    state->deckCount[player]--;
       75:  562:    state->handCount[player]++;//Increment hand count
       75:  562-block  0
unconditional  0 taken 75
        -:  563:  }
        -:  564:
       75:  565:  return 0;
       75:  565-block  0
unconditional  0 taken 75
        -:  566:}
        -:  567:
function getCost called 0 returned 0% blocks executed 0%
    #####:  568:int getCost(int cardNumber)
    $$$$$:  568-block  0
        -:  569:{
    #####:  570:  switch( cardNumber ) 
    $$$$$:  570-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  571:    {
        -:  572:    case curse:
    #####:  573:      return 0;
    $$$$$:  573-block  0
unconditional  0 never executed
        -:  574:    case estate:
    #####:  575:      return 2;
    $$$$$:  575-block  0
unconditional  0 never executed
        -:  576:    case duchy:
    #####:  577:      return 5;
    $$$$$:  577-block  0
unconditional  0 never executed
        -:  578:    case province:
    #####:  579:      return 8;
    $$$$$:  579-block  0
unconditional  0 never executed
        -:  580:    case copper:
    #####:  581:      return 0;
    $$$$$:  581-block  0
unconditional  0 never executed
        -:  582:    case silver:
    #####:  583:      return 3;
    $$$$$:  583-block  0
unconditional  0 never executed
        -:  584:    case gold:
    #####:  585:      return 6;
    $$$$$:  585-block  0
unconditional  0 never executed
        -:  586:    case adventurer:
    #####:  587:      return 6;
    $$$$$:  587-block  0
unconditional  0 never executed
        -:  588:    case council_room:
    #####:  589:      return 5;
    $$$$$:  589-block  0
unconditional  0 never executed
        -:  590:    case feast:
    #####:  591:      return 4;
    $$$$$:  591-block  0
unconditional  0 never executed
        -:  592:    case gardens:
    #####:  593:      return 4;
    $$$$$:  593-block  0
unconditional  0 never executed
        -:  594:    case mine:
    #####:  595:      return 5;
    $$$$$:  595-block  0
unconditional  0 never executed
        -:  596:    case remodel:
    #####:  597:      return 4;
    $$$$$:  597-block  0
unconditional  0 never executed
        -:  598:    case smithy:
    #####:  599:      return 4;
    $$$$$:  599-block  0
unconditional  0 never executed
        -:  600:    case village:
    #####:  601:      return 3;
    $$$$$:  601-block  0
unconditional  0 never executed
        -:  602:    case baron:
    #####:  603:      return 4;
    $$$$$:  603-block  0
unconditional  0 never executed
        -:  604:    case great_hall:
    #####:  605:      return 3;
    $$$$$:  605-block  0
unconditional  0 never executed
        -:  606:    case minion:
    #####:  607:      return 5;
    $$$$$:  607-block  0
unconditional  0 never executed
        -:  608:    case steward:
    #####:  609:      return 3;
    $$$$$:  609-block  0
unconditional  0 never executed
        -:  610:    case tribute:
    #####:  611:      return 5;
    $$$$$:  611-block  0
unconditional  0 never executed
        -:  612:    case ambassador:
    #####:  613:      return 3;
    $$$$$:  613-block  0
unconditional  0 never executed
        -:  614:    case cutpurse:
    #####:  615:      return 4;
    $$$$$:  615-block  0
unconditional  0 never executed
        -:  616:    case embargo: 
    #####:  617:      return 2;
    $$$$$:  617-block  0
unconditional  0 never executed
        -:  618:    case outpost:
    #####:  619:      return 5;
    $$$$$:  619-block  0
unconditional  0 never executed
        -:  620:    case salvager:
    #####:  621:      return 4;
    $$$$$:  621-block  0
unconditional  0 never executed
        -:  622:    case sea_hag:
    #####:  623:      return 4;
    $$$$$:  623-block  0
unconditional  0 never executed
        -:  624:    case treasure_map:
    #####:  625:      return 4;
    $$$$$:  625-block  0
unconditional  0 never executed
        -:  626:    }
        -:  627:	
    #####:  628:  return -1;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:}
        -:  630:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  631:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  631-block  0
        -:  632:{
        -:  633:  int i;
        -:  634:  int j;
        -:  635:  int k;
        -:  636:  int x;
        -:  637:  int index;
    #####:  638:  int currentPlayer = whoseTurn(state);
    $$$$$:  638-block  0
call    0 never executed
    #####:  639:  int nextPlayer = currentPlayer + 1;
        -:  640:
    #####:  641:  int tributeRevealedCards[2] = {-1, -1};
        -:  642:  int temphand[MAX_HAND];// moved above the if statement
    #####:  643:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  644:    nextPlayer = 0;
    $$$$$:  644-block  0
unconditional  0 never executed
        -:  645:  }
        -:  646:  
        -:  647:	
        -:  648:  //uses switch to select card and perform actions
    #####:  649:  switch( card ) 
    $$$$$:  649-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  650:    {
        -:  651:    case adventurer:
        -:  652:    // draw 2 treasures, and discard all non-treasures
    #####:  653:		return playAdventurer(currentPlayer, handPos, state);
    $$$$$:  653-block  0
call    0 never executed
unconditional  1 never executed
        -:  654:			
        -:  655:    case council_room:
        -:  656:      //+4 Cards
    #####:  657:      for (i = 0; i < 4; i++)
    $$$$$:  657-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  657-block  1
branch  2 never executed
branch  3 never executed
        -:  658:	{
    #####:  659:	  drawCard(currentPlayer, state);
    $$$$$:  659-block  0
call    0 never executed
        -:  660:	}
        -:  661:			
        -:  662:      //+1 Buy
    #####:  663:      state->numBuys++;
        -:  664:			
        -:  665:      //Each other player draws a card
    #####:  666:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  666-block  0
unconditional  0 never executed
    $$$$$:  666-block  1
unconditional  1 never executed
    $$$$$:  666-block  2
branch  2 never executed
branch  3 never executed
        -:  667:	{
    #####:  668:	  if ( i != currentPlayer )
    $$$$$:  668-block  0
branch  0 never executed
branch  1 never executed
        -:  669:	    {
    #####:  670:	      drawCard(i, state);
    $$$$$:  670-block  0
call    0 never executed
unconditional  1 never executed
        -:  671:	    }
        -:  672:	}
        -:  673:			
        -:  674:      //put played card in played card pile
    #####:  675:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  675-block  0
call    0 never executed
        -:  676:			
    #####:  677:      return 0;
unconditional  0 never executed
        -:  678:			
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
    #####:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  682-block  0
unconditional  0 never executed
    $$$$$:  682-block  1
unconditional  1 never executed
    $$$$$:  682-block  2
branch  2 never executed
branch  3 never executed
    #####:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
    #####:  689:      updateCoins(currentPlayer, state, 5);
    $$$$$:  689-block  0
call    0 never executed
    #####:  690:      x = 1;//Condition to loop on
    #####:  691:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  691-block  0
branch  1 never executed
branch  2 never executed
    #####:  692:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  692-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
    #####:  700:	else if (state->coins < getCost(choice1)){
    $$$$$:  700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  701:	  printf("That card is too expensive!\n");
    $$$$$:  701-block  0
call    0 never executed
unconditional  1 never executed
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
    #####:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  713-block  0
call    0 never executed
    #####:  714:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
    #####:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  724-block  0
unconditional  0 never executed
    $$$$$:  724-block  1
unconditional  1 never executed
    $$$$$:  724-block  2
branch  2 never executed
branch  3 never executed
    #####:  725:	state->hand[currentPlayer][i] = temphand[i];
    #####:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
    #####:  730:      return 0;
    $$$$$:  730-block  0
unconditional  0 never executed
        -:  731:			
        -:  732:    case gardens:
    #####:  733:		return playGardens();
    $$$$$:  733-block  0
call    0 never executed
unconditional  1 never executed
        -:  734:			
        -:  735:    case mine:
    #####:  736:		return playMine(currentPlayer, choice1, choice2, handPos, state);
    $$$$$:  736-block  0
call    0 never executed
unconditional  1 never executed
        -:  737:			
        -:  738:    case remodel:
    #####:  739:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  740:
    #####:  741:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  741-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  742:	{
    #####:  743:	  return -1;
    $$$$$:  743-block  0
unconditional  0 never executed
        -:  744:	}
        -:  745:
    #####:  746:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  746-block  0
call    0 never executed
        -:  747:
        -:  748:      //discard card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  750:
        -:  751:      //discard trashed card
    #####:  752:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  752-block  0
unconditional  1 never executed
    $$$$$:  752-block  1
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  754-block  0
branch  0 never executed
branch  1 never executed
        -:  755:	    {
    #####:  756:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  756-block  0
call    0 never executed
    #####:  757:	      break;
unconditional  0 never executed
        -:  758:	    }
        -:  759:	}
        -:  760:
        -:  761:
    #####:  762:      return 0;
    $$$$$:  762-block  0
unconditional  0 never executed
        -:  763:		
        -:  764:    case smithy:
        -:  765:      //+3 Cards
    #####:  766:		return playSmithy(currentPlayer, handPos, state);
    $$$$$:  766-block  0
call    0 never executed
unconditional  1 never executed
        -:  767:		
        -:  768:    case village:
    #####:  769:		return playVillage(currentPlayer, handPos, state);
    $$$$$:  769-block  0
call    0 never executed
unconditional  1 never executed
        -:  770:		
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  773-block  0
branch  0 never executed
branch  1 never executed
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    $$$$$:  776-block  0
unconditional  0 never executed
    $$$$$:  776-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  776-block  2
unconditional  3 never executed
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  777-block  0
branch  0 never executed
branch  1 never executed
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  781-block  0
unconditional  0 never executed
    $$$$$:  781-block  1
unconditional  1 never executed
    $$$$$:  781-block  2
branch  2 never executed
branch  3 never executed
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  786-block  0
unconditional  0 never executed
        -:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    $$$$$:  793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  794-block  0
call    0 never executed
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:		isGameOver(state);
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:	      }
        -:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  800-block  0
unconditional  0 never executed
        -:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
    $$$$$:  804-block  0
unconditional  0 never executed
        -:  805:	  }
        -:  806:	}
        -:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    $$$$$:  810-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  811-block  0
call    0 never executed
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  814:	    isGameOver(state);
    $$$$$:  814-block  0
call    0 never executed
unconditional  1 never executed
        -:  815:	  }
        -:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
    $$$$$:  820-block  0
unconditional  0 never executed
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
    $$$$$:  824-block  0
call    0 never executed
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  831:      return 0;
unconditional  0 never executed
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  838-block  0
call    0 never executed
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    $$$$$:  842-block  0
unconditional  0 never executed
        -:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  845-block  0
branch  0 never executed
branch  1 never executed
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
    $$$$$:  848-block  0
unconditional  0 never executed
    $$$$$:  848-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  850-block  0
call    0 never executed
unconditional  1 never executed
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
    $$$$$:  854-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  854-block  1
branch  2 never executed
branch  3 never executed
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    $$$$$:  856-block  0
call    0 never executed
        -:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  860-block  0
unconditional  0 never executed
    $$$$$:  860-block  1
unconditional  1 never executed
    $$$$$:  860-block  2
branch  2 never executed
branch  3 never executed
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
    $$$$$:  862-block  0
branch  0 never executed
branch  1 never executed
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
    $$$$$:  864-block  0
branch  0 never executed
branch  1 never executed
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
    $$$$$:  867-block  0
unconditional  0 never executed
    $$$$$:  867-block  1
branch  1 never executed
branch  2 never executed
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
    $$$$$:  869-block  0
call    0 never executed
unconditional  1 never executed
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
    $$$$$:  873-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  873-block  1
branch  2 never executed
branch  3 never executed
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    $$$$$:  875-block  0
call    0 never executed
        -:  876:			}
        -:  877:		    }
        -:  878:		}
        -:  879:	    }
        -:  880:				
        -:  881:	}
    #####:  882:      return 0;
    $$$$$:  882-block  0
unconditional  0 never executed
        -:  883:		
        -:  884:    case steward:
    #####:  885:      if (choice1 == 1)
    $$$$$:  885-block  0
branch  0 never executed
branch  1 never executed
        -:  886:	{
        -:  887:	  //+2 cards
    #####:  888:	  drawCard(currentPlayer, state);
    $$$$$:  888-block  0
call    0 never executed
    #####:  889:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  890:	}
    #####:  891:      else if (choice1 == 2)
    $$$$$:  891-block  0
branch  0 never executed
branch  1 never executed
        -:  892:	{
        -:  893:	  //+2 coins
    #####:  894:	  state->coins = state->coins + 2;
    $$$$$:  894-block  0
unconditional  0 never executed
        -:  895:	}
        -:  896:      else
        -:  897:	{
        -:  898:	  //trash 2 cards in hand
    #####:  899:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  899-block  0
call    0 never executed
    #####:  900:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  901:	}
        -:  902:			
        -:  903:      //discard card from hand
    #####:  904:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  904-block  0
call    0 never executed
    #####:  905:      return 0;
unconditional  0 never executed
        -:  906:		
        -:  907:    case tribute:
    #####:  908:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  908-block  0
branch  0 never executed
branch  1 never executed
    #####:  909:	if (state->deckCount[nextPlayer] > 0){
    $$$$$:  909-block  0
branch  0 never executed
branch  1 never executed
    #####:  910:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	  state->deckCount[nextPlayer]--;
    $$$$$:  911-block  0
unconditional  0 never executed
        -:  912:	}
    #####:  913:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  913-block  0
branch  0 never executed
branch  1 never executed
    #####:  914:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  915:	  state->discardCount[nextPlayer]--;
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	}
        -:  917:	else{
        -:  918:	  //No Card to Reveal
        -:  919:	  if (DEBUG){
        -:  920:	    printf("No cards to reveal\n");
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      else{
    #####:  926:	if (state->deckCount[nextPlayer] == 0){
    $$$$$:  926-block  0
branch  0 never executed
branch  1 never executed
    #####:  927:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  927-block  0
unconditional  0 never executed
    $$$$$:  927-block  1
unconditional  1 never executed
    $$$$$:  927-block  2
branch  2 never executed
branch  3 never executed
    #####:  928:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  929:	    state->deckCount[nextPlayer]++;
    #####:  930:	    state->discard[nextPlayer][i] = -1;
    #####:  931:	    state->discardCount[nextPlayer]--;
        -:  932:	  }
        -:  933:			    
        -:  934:				
    #####:  935:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  935-block  0
call    0 never executed
unconditional  1 never executed
        -:  936:	} 
    #####:  937:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  939:	state->deckCount[nextPlayer]--;
    #####:  940:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    $$$$$:  942-block  0
unconditional  0 never executed
        -:  943:      }    
        -:  944:		       
    #####:  945:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$:  945-block  0
branch  0 never executed
branch  1 never executed
    #####:  946:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  947:	state->playedCardCount++;
    #####:  948:	tributeRevealedCards[1] = -1;
    $$$$$:  948-block  0
unconditional  0 never executed
        -:  949:      }
        -:  950:
    #####:  951:      for (i = 0; i <= 2; i ++){
    $$$$$:  951-block  0
unconditional  0 never executed
    $$$$$:  951-block  1
unconditional  1 never executed
    $$$$$:  951-block  2
branch  2 never executed
branch  3 never executed
    #####:  952:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  952-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  952-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  952-block  2
branch  4 never executed
branch  5 never executed
    #####:  953:	  state->coins += 2;
    $$$$$:  953-block  0
unconditional  0 never executed
        -:  954:	}
        -:  955:		    
    #####:  956:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$:  956-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  956-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  956-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  956-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  956-block  4
branch  8 never executed
branch  9 never executed
    #####:  957:	  drawCard(currentPlayer, state);
    $$$$$:  957-block  0
call    0 never executed
    #####:  958:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  959:	}
        -:  960:	else{//Action Card
    #####:  961:	  state->numActions = state->numActions + 2;
    $$$$$:  961-block  0
unconditional  0 never executed
        -:  962:	}
        -:  963:      }
        -:  964:	    
    #####:  965:      return 0;
    $$$$$:  965-block  0
unconditional  0 never executed
        -:  966:		
        -:  967:    case ambassador:
    #####:  968:      j = 0;		//used to check if player has enough cards to discard
        -:  969:
    #####:  970:      if (choice2 > 2 || choice2 < 0)
    $$$$$:  970-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  970-block  1
branch  2 never executed
branch  3 never executed
        -:  971:	{
    #####:  972:	  return -1;				
    $$$$$:  972-block  0
unconditional  0 never executed
        -:  973:	}
        -:  974:
    #####:  975:      if (choice1 == handPos)
    $$$$$:  975-block  0
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  return -1;
    $$$$$:  977-block  0
unconditional  0 never executed
        -:  978:	}
        -:  979:
    #####:  980:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  980-block  0
unconditional  0 never executed
    $$$$$:  980-block  1
unconditional  1 never executed
    $$$$$:  980-block  2
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$:  982-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  982-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  982-block  2
branch  4 never executed
branch  5 never executed
        -:  983:	    {
    #####:  984:	      j++;
    $$$$$:  984-block  0
unconditional  0 never executed
        -:  985:	    }
        -:  986:	}
    #####:  987:      if (j < choice2)
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  return -1;				
    $$$$$:  989-block  0
unconditional  0 never executed
        -:  990:	}
        -:  991:
        -:  992:      if (DEBUG) 
        -:  993:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  994:
        -:  995:      //increase supply count for choosen card by amount being discarded
    #####:  996:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  997:			
        -:  998:      //each other player gains a copy of revealed card
    #####:  999:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  999-block  0
unconditional  0 never executed
    $$$$$:  999-block  1
unconditional  1 never executed
    $$$$$:  999-block  2
branch  2 never executed
branch  3 never executed
        -: 1000:	{
    #####: 1001:	  if (i != currentPlayer)
    $$$$$: 1001-block  0
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1003-block  0
call    0 never executed
unconditional  1 never executed
        -: 1004:	    }
        -: 1005:	}
        -: 1006:
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1008-block  0
call    0 never executed
        -: 1009:
        -: 1010:      //trash copies of cards returned to supply
    #####: 1011:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1011-block  0
unconditional  1 never executed
    $$$$$: 1011-block  1
branch  2 never executed
branch  3 never executed
        -: 1012:	{
    #####: 1013:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1013-block  0
unconditional  0 never executed
    $$$$$: 1013-block  1
unconditional  1 never executed
    $$$$$: 1013-block  2
branch  2 never executed
branch  3 never executed
        -: 1014:	    {
    #####: 1015:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1015-block  0
branch  0 never executed
branch  1 never executed
        -: 1016:		{
    #####: 1017:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1017-block  0
call    0 never executed
    #####: 1018:		  break;
unconditional  0 never executed
        -: 1019:		}
        -: 1020:	    }
        -: 1021:	}			
        -: 1022:
    #####: 1023:      return 0;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:		
        -: 1025:    case cutpurse:
        -: 1026:
    #####: 1027:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1027-block  0
call    0 never executed
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1028-block  0
unconditional  1 never executed
    $$$$$: 1028-block  1
branch  2 never executed
branch  3 never executed
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
        -: 1031:	    {
    #####: 1032:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1032-block  0
unconditional  0 never executed
    $$$$$: 1032-block  1
unconditional  1 never executed
    $$$$$: 1032-block  2
branch  2 never executed
branch  3 never executed
        -: 1033:		{
    #####: 1034:		  if (state->hand[i][j] == copper)
    $$$$$: 1034-block  0
branch  0 never executed
branch  1 never executed
        -: 1035:		    {
    #####: 1036:		      discardCard(j, i, state, 0);
    $$$$$: 1036-block  0
call    0 never executed
    #####: 1037:		      break;
unconditional  0 never executed
        -: 1038:		    }
    #####: 1039:		  if (j == state->handCount[i])
    $$$$$: 1039-block  0
branch  0 never executed
branch  1 never executed
        -: 1040:		    {
    #####: 1041:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1041-block  0
unconditional  0 never executed
    $$$$$: 1041-block  1
unconditional  1 never executed
    $$$$$: 1041-block  2
branch  2 never executed
branch  3 never executed
        -: 1042:			{
        -: 1043:			  if (DEBUG)
        -: 1044:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1045:			}	
    #####: 1046:		      break;
    $$$$$: 1046-block  0
unconditional  0 never executed
        -: 1047:		    }		
        -: 1048:		}
        -: 1049:					
        -: 1050:	    }
        -: 1051:				
        -: 1052:	}				
        -: 1053:
        -: 1054:      //discard played card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1055-block  0
call    0 never executed
        -: 1056:
    #####: 1057:      return 0;
unconditional  0 never executed
        -: 1058:
        -: 1059:		
        -: 1060:    case embargo: 
        -: 1061:      //+2 Coins
    #####: 1062:      state->coins = state->coins + 2;
        -: 1063:			
        -: 1064:      //see if selected pile is in play
    #####: 1065:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1065-block  0
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  return -1;
    $$$$$: 1067-block  0
unconditional  0 never executed
        -: 1068:	}
        -: 1069:			
        -: 1070:      //add embargo token to selected supply pile
    #####: 1071:      state->embargoTokens[choice1]++;
        -: 1072:			
        -: 1073:      //trash card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1074-block  0
call    0 never executed
    #####: 1075:      return 0;
unconditional  0 never executed
        -: 1076:		
        -: 1077:    case outpost:
        -: 1078:      //set outpost flag
    #####: 1079:      state->outpostPlayed++;
        -: 1080:			
        -: 1081:      //discard card
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1082-block  0
call    0 never executed
    #####: 1083:      return 0;
unconditional  0 never executed
        -: 1084:		
        -: 1085:    case salvager:
        -: 1086:      //+1 buy
    #####: 1087:      state->numBuys++;
        -: 1088:			
    #####: 1089:      if (choice1)
    $$$$$: 1089-block  0
branch  0 never executed
branch  1 never executed
        -: 1090:	{
        -: 1091:	  //gain coins equal to trashed card
    #####: 1092:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1092-block  0
call    0 never executed
call    1 never executed
        -: 1093:	  //trash card
    #####: 1094:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1095:	}
        -: 1096:			
        -: 1097:      //discard card
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1098-block  0
call    0 never executed
    #####: 1099:      return 0;
unconditional  0 never executed
        -: 1100:		
        -: 1101:    case sea_hag:
    #####: 1102:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1102-block  0
unconditional  0 never executed
    $$$$$: 1102-block  1
unconditional  1 never executed
    $$$$$: 1102-block  2
branch  2 never executed
branch  3 never executed
    #####: 1103:	if (i != currentPlayer){
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    #####: 1104:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1105:	  state->discardCount[i]++;
    #####: 1106:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1106-block  0
unconditional  0 never executed
        -: 1107:	}
        -: 1108:      }
    #####: 1109:      return 0;
    $$$$$: 1109-block  0
unconditional  0 never executed
        -: 1110:		
        -: 1111:    case treasure_map:
        -: 1112:      //search hand for another treasure_map
    #####: 1113:      index = -1;
    #####: 1114:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1114-block  0
unconditional  0 never executed
    $$$$$: 1114-block  1
unconditional  1 never executed
    $$$$$: 1114-block  2
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
        -: 1117:	    {
    #####: 1118:	      index = i;
    #####: 1119:	      break;
    $$$$$: 1119-block  0
unconditional  0 never executed
        -: 1120:	    }
        -: 1121:	}
    #####: 1122:      if (index > -1)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	{
        -: 1124:	  //trash both treasure cards
    #####: 1125:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1125-block  0
call    0 never executed
    #####: 1126:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1127:
        -: 1128:	  //gain 4 Gold cards
    #####: 1129:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1129-block  0
branch  2 never executed
branch  3 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1131-block  0
call    0 never executed
        -: 1132:	    }
        -: 1133:				
        -: 1134:	  //return success
    #####: 1135:	  return 1;
    $$$$$: 1135-block  0
unconditional  0 never executed
        -: 1136:	}
        -: 1137:			
        -: 1138:      //no second treasure_map found in hand
    #####: 1139:      return -1;
    $$$$$: 1139-block  0
unconditional  0 never executed
        -: 1140:    }
        -: 1141:	
    #####: 1142:  return -1;
    $$$$$: 1142-block  0
unconditional  0 never executed
    $$$$$: 1142-block  1
unconditional  1 never executed
        -: 1143:}
        -: 1144:
function discardCard called 8 returned 100% blocks executed 89%
        8: 1145:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        8: 1145-block  0
        -: 1146:{
        -: 1147:	
        -: 1148:  //if card is not trashed, added to Played pile 
        8: 1149:  if (trashFlag < 1)
        8: 1149-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        -: 1150:    {
        -: 1151:      //add card to played pile
        6: 1152:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1153:      state->playedCardCount++;
        6: 1153-block  0
unconditional  0 taken 6
        -: 1154:    }
        -: 1155:	
        -: 1156:  //set played card to -1
        8: 1157:  state->hand[currentPlayer][handPos] = -1;
        -: 1158:	
        -: 1159:  //remove card from player's hand
        8: 1160:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        8: 1160-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
        1: 1163:      state->handCount[currentPlayer]--;
        1: 1163-block  0
unconditional  0 taken 1
        -: 1164:    }
        7: 1165:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        7: 1165-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 1166:    {
        -: 1167:      //reduce number of cards in hand
    #####: 1168:      state->handCount[currentPlayer]--;
    $$$$$: 1168-block  0
unconditional  0 never executed
        -: 1169:    }
        -: 1170:  else 	
        -: 1171:    {
        -: 1172:      //replace discarded card with last card in hand
        7: 1173:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1174:      //set last card to -1
        7: 1175:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1176:      //reduce number of cards in hand
        7: 1177:      state->handCount[currentPlayer]--;
        7: 1177-block  0
unconditional  0 taken 7
        -: 1178:    }
        -: 1179:	
        8: 1180:  return 0;
        8: 1180-block  0
unconditional  0 taken 8
        -: 1181:}
        -: 1182:
function gainCard called 35 returned 100% blocks executed 80%
       35: 1183:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       35: 1183-block  0
        -: 1184:{
        -: 1185:  //Note: supplyPos is enum of choosen card
        -: 1186:	
        -: 1187:  //check if supply pile is empty (0) or card is not used in game (-1)
       35: 1188:  if ( supplyCount(supplyPos, state) < 1 )
       35: 1188-block  0
call    0 returned 35
branch  1 taken 0 (fallthrough)
branch  2 taken 35
        -: 1189:    {
    #####: 1190:      return -1;
    $$$$$: 1190-block  0
unconditional  0 never executed
        -: 1191:    }
        -: 1192:	
        -: 1193:  //added card for [whoseTurn] current player:
        -: 1194:  // toFlag = 0 : add to discard
        -: 1195:  // toFlag = 1 : add to deck
        -: 1196:  // toFlag = 2 : add to hand
        -: 1197:
       35: 1198:  if (toFlag == 1)
       35: 1198-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 12
        -: 1199:    {
       23: 1200:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       23: 1201:      state->deckCount[player]++;
       23: 1201-block  0
unconditional  0 taken 23
        -: 1202:    }
       12: 1203:  else if (toFlag == 2)
       12: 1203-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 1204:    {
       12: 1205:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       12: 1206:      state->handCount[player]++;
       12: 1206-block  0
unconditional  0 taken 12
        -: 1207:    }
        -: 1208:  else
        -: 1209:    {
    #####: 1210:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1211:      state->discardCount[player]++;
    $$$$$: 1211-block  0
unconditional  0 never executed
        -: 1212:    }
        -: 1213:	
        -: 1214:  //decrease number in supply pile
       35: 1215:  state->supplyCount[supplyPos]--;
        -: 1216:	 
       35: 1217:  return 0;
       35: 1217-block  0
unconditional  0 taken 35
        -: 1218:}
        -: 1219:
function updateCoins called 11 returned 100% blocks executed 82%
       11: 1220:int updateCoins(int player, struct gameState *state, int bonus)
       11: 1220-block  0
        -: 1221:{
        -: 1222:  int i;
        -: 1223:	
        -: 1224:  //reset coin count
       11: 1225:  state->coins = 0;
        -: 1226:
        -: 1227:  //add coins for each Treasure card in player's hand
       66: 1228:  for (i = 0; i < state->handCount[player]; i++)
       11: 1228-block  0
unconditional  0 taken 11
       55: 1228-block  1
unconditional  1 taken 55
       66: 1228-block  2
branch  2 taken 55
branch  3 taken 11 (fallthrough)
        -: 1229:    {
       55: 1230:      if (state->hand[player][i] == copper)
       55: 1230-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 17
        -: 1231:	{
       38: 1232:	  state->coins += 1;
       38: 1232-block  0
unconditional  0 taken 38
        -: 1233:	}
       17: 1234:      else if (state->hand[player][i] == silver)
       17: 1234-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
        -: 1235:	{
    #####: 1236:	  state->coins += 2;
    $$$$$: 1236-block  0
unconditional  0 never executed
        -: 1237:	}
       17: 1238:      else if (state->hand[player][i] == gold)
       17: 1238-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
        -: 1239:	{
    #####: 1240:	  state->coins += 3;
    $$$$$: 1240-block  0
unconditional  0 never executed
        -: 1241:	}	
        -: 1242:    }	
        -: 1243:
        -: 1244:  //add bonus
       11: 1245:  state->coins += bonus;
        -: 1246:
       11: 1247:  return 0;
       11: 1247-block  0
unconditional  0 taken 11
        -: 1248:}
        -: 1249:
        -: 1250:
        -: 1251:// NEW: card functions
function playSmithy called 3 returned 100% blocks executed 100%
        3: 1252:int playSmithy(int currentPlayer, int handPos, struct gameState *state) {
        3: 1252-block  0
        -: 1253:	int i;
       12: 1254:	for (i = 0; i < 3; i++)
        3: 1254-block  0
unconditional  0 taken 3
unconditional  1 taken 9
       12: 1254-block  1
branch  2 taken 9
branch  3 taken 3 (fallthrough)
        9: 1255:		drawCard(currentPlayer, state);
        9: 1255-block  0
call    0 returned 9
        -: 1256:	// should be discardCard(handPos, ...)
        3: 1257:	discardCard(0, currentPlayer, state, 0);
        3: 1257-block  0
call    0 returned 3
        3: 1258:	return 0;
unconditional  0 taken 3
        -: 1259:}
        -: 1260:
function playAdventurer called 3 returned 100% blocks executed 87%
        3: 1261:int playAdventurer(int currentPlayer, int handPos, struct gameState *state) {
        3: 1261-block  0
        3: 1262:	int cardDrawn = 0;
        3: 1263:	int z = 0; 
        3: 1264:	int drawntreasure = 0; 
        -: 1265:	int temphand[MAX_HAND];
        -: 1266:	
       11: 1267:	while (drawntreasure < 2) {
        3: 1267-block  0
unconditional  0 taken 3
       11: 1267-block  1
branch  1 taken 8
branch  2 taken 3 (fallthrough)
        -: 1268:		//if the deck is empty we need to shuffle discard and add to deck
        8: 1269:		if (state->deckCount[currentPlayer] < 1)
        8: 1269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1270:			shuffle(currentPlayer, state);
    $$$$$: 1270-block  0
call    0 never executed
unconditional  1 never executed
        8: 1271:		drawCard(currentPlayer, state);
        8: 1271-block  0
call    0 returned 8
        -: 1272:		//top card of hand is most recently drawn card.
        8: 1273:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        8: 1274:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        2: 1274-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 1274-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        6: 1275:			drawntreasure++;
        6: 1275-block  0
unconditional  0 taken 6
        -: 1276:		else {
        2: 1277:			temphand[z] = cardDrawn;
        -: 1278:			//this should just remove the top card (the most recently drawn one).
        2: 1279:			state->handCount[currentPlayer]--;
        2: 1279-block  0
unconditional  0 taken 2
        -: 1280:			//z++;
        -: 1281:		}
        -: 1282:	}
        -: 1283:	
        3: 1284:	while (z-1 >= 0)
        3: 1284-block  0
unconditional  0 taken 3
        3: 1284-block  1
branch  1 taken 0
branch  2 taken 3 (fallthrough)
    #####: 1285:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[--z];
    $$$$$: 1285-block  0
unconditional  0 never executed
        -: 1286:	
        -: 1287:	//discardCard(handPos, currentPlayer, state, 0);
        3: 1288:	return 0;
        3: 1288-block  0
unconditional  0 taken 3
        -: 1289:}
        -: 1290:
function playMine called 0 returned 0% blocks executed 0%
    #####: 1291:int playMine(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state) {
    $$$$$: 1291-block  0
    #####: 1292:	int i = 0;
    #####: 1293:	int j = state->hand[currentPlayer][choice1];
        -: 1294:	
    #####: 1295:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$: 1295-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1295-block  1
branch  2 never executed
branch  3 never executed
    #####: 1296:		return -1;
    $$$$$: 1296-block  0
unconditional  0 never executed
        -: 1297:	
    #####: 1298:	if (choice2 > treasure_map || choice2 < curse)
    $$$$$: 1298-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1298-block  1
branch  2 never executed
branch  3 never executed
    #####: 1299:		return -1;
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:	
    #####: 1301:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
    $$$$$: 1301-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1302:		return -1;
    $$$$$: 1302-block  0
unconditional  0 never executed
        -: 1303:	
    #####: 1304:	gainCard(choice2, state, 2, currentPlayer);
    $$$$$: 1304-block  0
call    0 never executed
    #####: 1305:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1306:	for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$: 1306-block  0
unconditional  1 never executed
    $$$$$: 1306-block  1
branch  2 never executed
branch  3 never executed
    #####: 1307:		if (state->hand[currentPlayer][i] == j) {
    $$$$$: 1307-block  0
branch  0 never executed
branch  1 never executed
    #####: 1308:			discardCard(i, currentPlayer, state, 0);
    $$$$$: 1308-block  0
call    0 never executed
    #####: 1309:			break;
unconditional  0 never executed
        -: 1310:		}
        -: 1311:		
    #####: 1312:	return 0;
    $$$$$: 1312-block  0
unconditional  0 never executed
        -: 1313:}
        -: 1314:
function playVillage called 3 returned 100% blocks executed 100%
        3: 1315:int playVillage(int currentPlayer, int handPos, struct gameState* state) {
        3: 1315-block  0
        -: 1316:	//+1 Card
        3: 1317:	drawCard(currentPlayer, state);
        3: 1317-block  0
call    0 returned 3
        -: 1318:	//+2 Actions
        3: 1319:	state->numActions = state->numActions + 1; // changed error to vary results
        -: 1320:	//discard played card from hand
        3: 1321:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3: 1322:	return 0;
unconditional  0 taken 3
        -: 1323:}
        -: 1324:
function playGardens called 1 returned 100% blocks executed 100%
        1: 1325:int playGardens() {
        1: 1325-block  0
        -: 1326:	// should return -1
        1: 1327:	return 0;
        1: 1327-block  0
unconditional  0 taken 1
        -: 1328:}
        -: 1329:
        -: 1330://end of dominion.c
        -: 1331:
